[
    {
        "id": "06c72d44e5729b2a",
        "type": "tab",
        "label": "wt: geofencing",
        "disabled": false,
        "info": "# localhost #1\n\n    `\n    prefetch data dari queue 1 message / 15 seconds\n    `\n\n# locahost #2\n\n    `\n    prefetch data dari queue 1 message / 5 seconds\n    `\n\n# locahost #3\n\n    `\n    prefetch data dari queue 1 message / 3 seconds\n    `\n\n# locahost:last\n\n    `\n    no prefetch for all flows\n    `\n",
        "env": []
    },
    {
        "id": "9ba7388927fccc31",
        "type": "tab",
        "label": "wt: series",
        "disabled": false,
        "info": "# localhost #1\n\n    `\n    prefetch data dari queue 1 message / 5 seconds\n    `\n\n# locahost #2\n\n    `\n    prefetch data dari queue 1 message / 17 seconds\n    `\n\n# localhost:last\n\n    `\n    no prefetch for all flows\n    `\n",
        "env": []
    },
    {
        "id": "9f1e98d4426d35e3",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wroker tracker transaction",
        "style": {
            "label": true,
            "label-position": "n",
            "stroke": "none",
            "color": "#ff0000",
            "fill": "#e3f3d3",
            "fill-opacity": "0.4"
        },
        "nodes": [
            "e8c0683cc5f8df67",
            "d18b39342c8a59d3",
            "8f24af074f1a443c",
            "55ed1342d1fd4d9c",
            "61a97b32b17dbf53",
            "b387dc3b8e3ba31b",
            "8ab2f8087937a815",
            "b765932bf69d2d0f",
            "2da97027bd0d7c7a",
            "5c21ea28c38aab09",
            "4b898ccf9f8a0eaa",
            "996035da1afdd16a",
            "909f0bae520fb673",
            "73952f098b8ed22c"
        ],
        "x": 34,
        "y": 39,
        "w": 592,
        "h": 542
    },
    {
        "id": "60b254c433dfc6f4",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "localhost",
        "port": "5630",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "15000"
    },
    {
        "id": "a71ab4cd6eb395c0",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "localhost",
        "port": "5630",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "5000"
    },
    {
        "id": "317dcd65d78d7168",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "localhost",
        "port": "5630",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "30000"
    },
    {
        "id": "e907ba5364e5896f",
        "type": "amqp-server",
        "z": "9ba7388927fccc31",
        "host": "localhost",
        "port": "5630",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "5000"
    },
    {
        "id": "70620c4aa929b5d8",
        "type": "amqp-server",
        "host": "localhost",
        "port": "5630",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": false,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "10"
    },
    {
        "id": "56e870f2a20cabb0",
        "type": "amqp-server",
        "z": "9ba7388927fccc31",
        "host": "localhost",
        "port": "5630",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "17000"
    },
    {
        "id": "e8c0683cc5f8df67",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "send to worker",
        "func": "try {\n    let w = global.get('worker');\n    let worker = new w.Worker('./workers/w-geo.js');\n    let { date, series } = msg.payload;\n    let [ident, tracking] = series;\n\n    worker.on('message', (result) => {\n        worker.terminate();\n        let { area, tracking } = result.data;\n        if (Array.isArray(tracking) && tracking.length > 0) {\n            node.send({\n                payload: { date, ident, area, tracking }\n            });\n        }\n    });\n    worker.on('error', (err) => {\n        worker.terminate();\n        msg.error = err;\n        node.send(msg);\n    })\n\n    // Send a message to the worker thread\n    worker.postMessage({\n        func: 'checkLocationsInMultiPloygon',\n        payload: {\n            locations: tracking,\n            multiPolygon: msg.geoDivision\n        }\n    });\n} catch (err) {\n    node.warn(err);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 160,
        "wires": [
            [
                "55ed1342d1fd4d9c"
            ]
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "d18b39342c8a59d3",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.division",
        "server": "a71ab4cd6eb395c0",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "61a97b32b17dbf53"
            ]
        ]
    },
    {
        "id": "8f24af074f1a443c",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "get SMSE divisions geojson",
        "func": "const couchdb = global.get('couchdb');\n\ncouchdb.view('smart-geojson', 'division', 'geo-by-estate', {\n    key: ['PSM 2', \"SMSE\"]\n}).then(res => {\n    res.data.rows.map(x => x.value).forEach(div => {\n        msg.geoDivision = div;\n        node.send(msg);\n    });\n})\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 120,
        "wires": [
            [
                "e8c0683cc5f8df67"
            ]
        ],
        "icon": "font-awesome/fa-code-fork"
    },
    {
        "id": "55ed1342d1fd4d9c",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.division",
        "server": "70620c4aa929b5d8",
        "x": 490,
        "y": 160,
        "wires": []
    },
    {
        "id": "61a97b32b17dbf53",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "get block geojson",
        "func": "const couchdb = global.get('couchdb');\nlet { area } = msg.payload;\nlet { psm, estate, division } = area;\n\ncouchdb.view('smart-geojson', 'block', 'geo-by-division', {\n    key: [psm, estate, division]\n}).then(res => {\n    res.data.rows.map(x => x.value).forEach(block => {\n        msg.geoBlock = block;\n        node.send(msg);\n    });\n})\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 260,
        "wires": [
            [
                "b387dc3b8e3ba31b"
            ]
        ]
    },
    {
        "id": "b387dc3b8e3ba31b",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "send to worker",
        "func": "try {\n    let w = global.get('worker');\n    let worker = new w.Worker('./workers/w-geo.js');\n    let { date, ident, tracking } = msg.payload;\n\n    // Send a message to the worker thread\n    worker.postMessage({\n        func: 'checkLocationsInPloygon',\n        payload: {\n            locations: tracking,\n            geojson: msg.geoBlock\n        }\n    });\n    \n    worker.on('message', (result) => {\n        worker.terminate();\n        let { area, tracking } = result.data;\n        if (Array.isArray(tracking) && tracking.length > 0) {\n            node.send({\n                payload: {\n                    date,\n                    ident,\n                    area,\n                    tracking\n                }\n            });\n        }\n    });\n\n    worker.on('error', (err) => {\n        worker.terminate();\n        msg.error = err;\n        node.send(msg);\n    });\n} catch (err) {\n    node.warn(err);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 300,
        "wires": [
            [
                "8ab2f8087937a815"
            ]
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "8ab2f8087937a815",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.block",
        "server": "70620c4aa929b5d8",
        "x": 490,
        "y": 300,
        "wires": []
    },
    {
        "id": "b765932bf69d2d0f",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.block",
        "server": "317dcd65d78d7168",
        "x": 190,
        "y": 360,
        "wires": [
            [
                "2da97027bd0d7c7a"
            ]
        ]
    },
    {
        "id": "2da97027bd0d7c7a",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "get tree geojson",
        "func": "const couchdb = global.get('couchdb');\nlet { date, ident, area } = msg.payload;\nlet { psm, estate, division, block } = area;\n\ncouchdb.view('smart-geojson', 'tree', 'geo-by-block', {\n    key: [psm, estate, division, block]\n}).then(res => {\n    let geoTree = res.data.rows?.map(x => x.value);\n    couchdb.view('transactions', 'filter', 'by-harvester-date', {\n        key: [ident[0], date]\n    }).then(res => {\n        let transIDs = res.data.rows?.map(x => x.value);\n        msg.geoTree = geoTree.filter(x => !transIDs.includes(x.properties['_id']));\n        node.send(msg);\n    });\n});\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 400,
        "wires": [
            [
                "5c21ea28c38aab09"
            ]
        ]
    },
    {
        "id": "5c21ea28c38aab09",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "send to worker",
        "func": "try {\n    let w = global.get('worker');\n    let worker = new w.Worker('./workers/w-geo.js');\n    let { ident, tracking } = msg.payload;\n    let geoTree = msg.geoTree;\n\n    worker.on('message', (result) => {\n        worker.terminate();\n        if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n            node.send({\n                payload: {\n                    ident,\n                    geofencing: result.data\n                }\n            });\n        }\n    });\n    worker.on('error', (err) => {\n        worker.terminate();\n        msg.error = err;\n        node.send(msg);\n    })\n\n    // Send a message to the worker thread\n    if (Array.isArray(geoTree) && geoTree.length > 0) {\n        worker.postMessage({\n            func: 'geofencing',\n            payload: {\n                locations: tracking,\n                geojson: geoTree\n            }\n        });\n    }\n    return null;\n} catch (err) {\n    node.warn(err);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 440,
        "wires": [
            [
                "4b898ccf9f8a0eaa"
            ]
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "4b898ccf9f8a0eaa",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.transaction",
        "server": "70620c4aa929b5d8",
        "x": 460,
        "y": 440,
        "wires": []
    },
    {
        "id": "996035da1afdd16a",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.transaction",
        "server": "70620c4aa929b5d8",
        "x": 220,
        "y": 500,
        "wires": [
            [
                "909f0bae520fb673"
            ]
        ]
    },
    {
        "id": "909f0bae520fb673",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "create transactions",
        "func": "try {\n    const couchdb = global.get('couchdb');\n\n    let { ident, geofencing } = msg.payload;\n    let [nik, device, imei] = ident;\n    let rs = [];\n    geofencing.forEach(geof => {\n        let { tree, loc } = geof;\n        let { _id, psm, estate, division, block } = tree.properties;\n        let transaction = rs.find(x => x.treeID == tree.properties._id);\n        let isHarvested = Number(loc[2]) == 1;\n        if (!transaction) {\n            rs.push({\n                treeID: _id,\n                psm: psm,\n                estate: estate,\n                division: division,\n                block: block,\n                harvester: nik,\n                harvested: (isHarvested) ? Number(loc[2]) : 0,\n                lastHarvested: (isHarvested) ? new Date(loc[0]) : null,\n                visited: 1,\n                lastVisited: new Date(loc[0]),\n                meta: {\n                    harvestedPoints: (isHarvested) ? [loc] : [],\n                    visitedPoints: [loc]\n                },\n                createdBy: \"system\",\n                createdDate: new Date(),\n                modifiedBy: \"system\",\n                modifiedDate: new Date(),\n            });\n        } else {\n            if (isHarvested) {\n                transaction.harvested++;\n                transaction.lastHarvested = new Date(loc[0]);\n                transaction.meta.harvestedPoints.push(loc);\n            }\n            transaction.visited++;\n            transaction.meta.visitedPoints.push(loc);\n        }\n    });\n\n    rs.forEach(data => {\n        data.meta.harvestedPoints = JSON.stringify(data.meta.harvestedPoints);\n        data.meta.visitedPoints = JSON.stringify(data.meta.visitedPoints);\n    });\n\n    couchdb.bulkInsert('transactions', rs).then(res => {\n        node.send({\n            payload: res.data\n        });\n    }, (err) => {\n        node.send({\n            error: err\n        });\n    });\n} catch (err) {\n    node.warn(err);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "73952f098b8ed22c",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.perdevice",
        "server": "60b254c433dfc6f4",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "8f24af074f1a443c"
            ]
        ]
    },
    {
        "id": "7caf168b939b9028",
        "type": "amqp in",
        "z": "9ba7388927fccc31",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.csv.import",
        "server": "e907ba5364e5896f",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "bb6860a59623cd4b"
            ]
        ]
    },
    {
        "id": "bb6860a59623cd4b",
        "type": "function",
        "z": "9ba7388927fccc31",
        "name": "chunk data",
        "func": "// let payload = msg.payload;\n// msg.ori = payload;\n// msg.payload = payload;\n\n// const chunkSize = 10000;\n\n// if (payload.length > chunkSize) {\n//   for (let i = 0; i < payload.length; i += chunkSize) {\n//     const chunk = payload.slice(i, i + chunkSize);\n//     node.send({\n//       payload: chunk\n//     });\n//   }\n// } else {\n//   node.send({\n//     payload\n//   });\n// }\n// return null;\n\nlet payload = msg.payload;\n\nconst chunkSize = 1000;\nconst delayBetweenChunks = 1000;\n\nfunction processArrayWithDelay(startIndex) {\n  const endIndex = Math.min(startIndex + chunkSize, payload.length);\n  const chunk = payload.slice(startIndex, endIndex);\n\n  node.send({\n    payload: chunk\n  });\n\n  if (endIndex < payload.length) {\n    setTimeout(() => {\n      processArrayWithDelay(endIndex);\n    }, delayBetweenChunks);\n  }\n}\n\n// Start processing the array with a delay\nprocessArrayWithDelay(0);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 60,
        "wires": [
            [
                "bafc0bcaf316df35"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f449ebb8cc8d7088",
        "type": "function",
        "z": "9ba7388927fccc31",
        "name": "build create & add commands",
        "func": "const redisTS = global.get('redisTS');\n\nredisTS.commands([['keys', 'wt:*']]).then(rs => {\n    let wtKeys = rs.data[0];\n    let payload = msg.payload;\n    let suffix = ['deviceDatetime', 'latitude', 'longitude', 'altitude', 'speed', 'event', 'battery'];\n    let addCommands = [];\n    let createPayload = [];\n\n    for (const rec of payload) {\n        let { deviceID, deviceDatetime, latitude, longitude, altitude, event, speed, battery } = rec;\n        if (deviceDatetime && deviceDatetime != null && deviceDatetime != \"\") {\n            suffix.forEach(suf => {\n                if (!wtKeys.includes(`wt:${deviceID}:${suf}`) && createPayload.find(x => x.key == `wt:${deviceID}:${suf}`) == undefined) {\n                    createPayload.push({\n                        key: `wt:${deviceID}:${suf}`,\n                        retention: 0,\n                        duplicatePolicy: (suf != 'event') ? 'LAST' : 'SUM',\n                        labels: ['type', 'worker-tracker', 'deviceID', deviceID, 'topic', suf],\n                        encoding: 'UNCOMPRESSED'\n                    });\n                }\n            })\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:deviceDatetime`,\n                new Date(deviceDatetime).getTime().toString(),\n                new Date(deviceDatetime).getTime().toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:latitude`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(latitude).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:longitude`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(longitude).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:altitude`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(altitude).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:speed`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(speed).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:event`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(event).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:battery`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(battery).toString()\n            ]);\n        }\n    }\n\n    redisTS.tsCreate(createPayload).then(createRS => {\n        msg.payload = addCommands;\n        node.send(msg);\n    })\n});\n\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "e057ad1e131c55ee"
            ]
        ],
        "icon": "font-awesome/fa-code-fork"
    },
    {
        "id": "e057ad1e131c55ee",
        "type": "function",
        "z": "9ba7388927fccc31",
        "name": "ts.add data series",
        "func": "const w = global.get('worker');\nconst worker = new w.Worker('./workers/w-redis-ts.js', { workerData: 'send data csv to timeseries' });\n\nworker.on('message', (result) => {\n    worker.terminate();\n    node.send({ payload: result });\n});\nworker.on('error', (err) => {\n    worker.terminate();\n    msg.error = err;\n    node.send(msg);\n})\n\n// Send a message to the worker thread\nworker.postMessage({\n    func: 'commands',\n    payload: msg.payload\n});\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "3fcc35deba3e1da9",
        "type": "amqp in",
        "z": "9ba7388927fccc31",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.csv.import.chunk",
        "server": "56e870f2a20cabb0",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "f449ebb8cc8d7088"
            ]
        ]
    },
    {
        "id": "bafc0bcaf316df35",
        "type": "amqp out",
        "z": "9ba7388927fccc31",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.csv.import.chunk",
        "server": "56e870f2a20cabb0",
        "x": 570,
        "y": 60,
        "wires": []
    }
]