[
    {
        "id": "06c72d44e5729b2a",
        "type": "tab",
        "label": "wt: geofencing",
        "disabled": false,
        "info": "# localhost #1\n\n    `\n    prefetch data dari queue 1 message / 15 seconds\n    `\n\n# locahost #2\n\n    `\n    prefetch data dari queue 1 message / 5 seconds\n    `\n\n# locahost #3\n\n    `\n    prefetch data dari queue 1 message / 3 seconds\n    `\n\n# locahost:last\n\n    `\n    no prefetch for all flows\n    `\n\n// nrlint function-eslint:off\n",
        "env": []
    },
    {
        "id": "9ba7388927fccc31",
        "type": "tab",
        "label": "wt: series",
        "disabled": false,
        "info": "# localhost #1\n\n    `\n    prefetch data dari queue 1 message / 5 seconds\n    `\n\n# locahost #2\n\n    `\n    prefetch data dari queue 1 message / 17 seconds\n    `\n\n# localhost:last\n\n    `\n    no prefetch for all flows\n    `\n\n// nrlint function-eslint:off\n",
        "env": []
    },
    {
        "id": "ef0e7b589320b81a",
        "type": "subflow",
        "name": "sub: couchdb-insert",
        "info": "# Input\n\n### msg.sub\n\n    {\n        database: 'smart-bucket',\n        doc: {}\n    }\n\n// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "6ae3265eb63f2da2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 160,
                "wires": [
                    {
                        "id": "447e985e09671110",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFAAAA"
    },
    {
        "id": "89ff6cae3b742adc",
        "type": "group",
        "z": "9ba7388927fccc31",
        "name": "wt: smarttimeseris to redistimeseries",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "fill-opacity": "0.4",
            "color": "#ff0000",
            "stroke": "none"
        },
        "nodes": [
            "7caf168b939b9028",
            "bb6860a59623cd4b",
            "f449ebb8cc8d7088",
            "3fcc35deba3e1da9",
            "bafc0bcaf316df35",
            "020716827bd6f57c",
            "c26a5a59558077e8",
            "a367101b418a89b8",
            "9596044b29bc782f",
            "ec839a96c93d00fb"
        ],
        "x": 14,
        "y": 259,
        "w": 892,
        "h": 262
    },
    {
        "id": "9f1e98d4426d35e3",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: get divisions in estate and filter longlat by division",
        "style": {
            "label": true,
            "stroke": "none",
            "color": "#ff0000",
            "fill": "#c8e7a7",
            "fill-opacity": "0.5"
        },
        "nodes": [
            "8f24af074f1a443c",
            "73952f098b8ed22c",
            "bfe3ce28f29a69ae",
            "c2af8c09210a4097",
            "a682597d72837a54",
            "19bc5810b2b9aee7",
            "036aac412f2ada03",
            "7461788f7573e617",
            "7bc55cf847260a66",
            "46628c8f43849ad8"
        ],
        "x": 34,
        "y": 39,
        "w": 1212,
        "h": 242
    },
    {
        "id": "48e7b095e8d92958",
        "type": "group",
        "z": "9ba7388927fccc31",
        "name": "smartbucket.to.smarttimeseries",
        "style": {
            "stroke": "none",
            "fill": "#e3f3d3",
            "fill-opacity": "0.45",
            "label": true,
            "color": "#ff3f3f"
        },
        "nodes": [
            "e3a50e6cb96cc3b3",
            "dd42509446494f20",
            "bcecd284253e3eb6",
            "80f39477122f0d22",
            "e9b2695be28f6292",
            "c5e024b4ad9d61e7"
        ],
        "x": 14,
        "y": 79,
        "w": 892,
        "h": 142
    },
    {
        "id": "bf7019fa94e27678",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: job from division",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#c8e7a7",
            "fill-opacity": "0.5",
            "color": "#ff3f3f"
        },
        "nodes": [
            "d18b39342c8a59d3",
            "61a97b32b17dbf53",
            "ba50707f8350607b",
            "583c321e926a7194",
            "75ddc81655b011e5",
            "f837821d76ab526d",
            "4a5542470e78ff1f",
            "c7bb13b96f9452a1",
            "142059263db366f7"
        ],
        "x": 34,
        "y": 319,
        "w": 1052,
        "h": 162
    },
    {
        "id": "675a034d3ec876e6",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: filter longlat by block",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#c8e7a7",
            "fill-opacity": "0.48",
            "color": "#ff3f3f"
        },
        "nodes": [
            "ba3d896fdaf8eaeb",
            "b387dc3b8e3ba31b",
            "62a7d89a51841542",
            "f27b55e10b676cbc",
            "46f35e50e7239b03",
            "8ab2f8087937a815",
            "bafc614fbcb82f02",
            "74512cf78c05f502"
        ],
        "x": 34,
        "y": 519,
        "w": 952,
        "h": 182
    },
    {
        "id": "8913e09cb6434789",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: filter longlat by trees inside block",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#c8e7a7",
            "fill-opacity": "0.48",
            "color": "#ff3f3f"
        },
        "nodes": [
            "b765932bf69d2d0f",
            "2da97027bd0d7c7a",
            "9650f01883ca82d9",
            "084f166599dd9ab2",
            "6d5542a7141c4672",
            "32bb7db17bf0aae4",
            "aa46181f2e4cf02e"
        ],
        "x": 34,
        "y": 739,
        "w": 1032,
        "h": 142
    },
    {
        "id": "96db80cb3d51c6c6",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: geofencing and create transaction",
        "style": {
            "stroke": "none",
            "fill": "#c8e7a7",
            "fill-opacity": "0.45",
            "label": true,
            "color": "#ff3f3f"
        },
        "nodes": [
            "996035da1afdd16a",
            "909f0bae520fb673",
            "d821f6f9cad4c1e3",
            "652a4d3ed7d3a711",
            "2e87f501b0a0f94b",
            "c88815bdc277d475",
            "aee9d1bce03f6042",
            "7470e87bc569f9a8"
        ],
        "x": 34,
        "y": 919,
        "w": 892,
        "h": 142
    },
    {
        "id": "e907ba5364e5896f",
        "type": "amqp-server",
        "z": "9ba7388927fccc31",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "5000"
    },
    {
        "id": "70620c4aa929b5d8",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": false,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "10"
    },
    {
        "id": "56e870f2a20cabb0",
        "type": "amqp-server",
        "z": "9ba7388927fccc31",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": false,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "10000"
    },
    {
        "id": "5471df75ac676292",
        "type": "amqp-server",
        "z": "9ba7388927fccc31",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "5000"
    },
    {
        "id": "0a8b482f55e0592d",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "30000"
    },
    {
        "id": "8dad4b74fb298592",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "10000"
    },
    {
        "id": "f7b36a35cf0d6417",
        "type": "amqp-server",
        "z": "9ba7388927fccc31",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": false,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "10"
    },
    {
        "id": "7a8729d72f970b40",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "10"
    },
    {
        "id": "94497583e5725ee2",
        "type": "amqp-server",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "10"
    },
    {
        "id": "73a503547a572f1b",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "10"
    },
    {
        "id": "e42544d355f50764",
        "type": "http request",
        "z": "ef0e7b589320b81a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 120,
        "wires": [
            [
                "447e985e09671110"
            ]
        ]
    },
    {
        "id": "6ae3265eb63f2da2",
        "type": "function",
        "z": "ef0e7b589320b81a",
        "name": "read sub",
        "func": "msg.backup = msg.payload;\n\nlet { database, doc } = msg.sub;\nmsg.payload = doc;\nmsg.headers = {\n    \"Authorization\": \"Basic \" +\n        Buffer.from(`${env.get('DOCS_MASTER_USER')}:${env.get('DOCS_MASTER_PASSWORD')}`).toString(\"base64\"),\n    \"Content-Type\": \"application/json; charset=utf-8\"\n}\nmsg.url = `${env.get('DOC_MASTER_DOMAIN')}/${database}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "e42544d355f50764"
            ]
        ]
    },
    {
        "id": "447e985e09671110",
        "type": "function",
        "z": "ef0e7b589320b81a",
        "name": "result",
        "func": "msg.sub = JSON.parse(msg.payload);\nmsg.payload = msg.backup;\ndelete msg.backup;\ndelete msg.url;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8f24af074f1a443c",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "get SMSE divisions geojson",
        "func": "const couchdb = global.get('couchdb');\nlet ori = msg;\ntry {\n    couchdb.view('smart-geojson', 'division', 'geo-by-estate', {\n        key: ['PSM 2', \"SMSE\"]\n    }).then(res => {\n        let geoDivisions = res.data.rows.map(x => x.value);\n        node.send({ geoDivisions, ack: true, ...ori }); /**acknowledge */\n    }, (err) => {\n        node.error({ segment: 'tracking.perdevice', err });\n        node.send({\n            ack: false,\n            error: err,\n            ...ori,\n        })\n    })\n} catch (err) {\n    node.error({ segment: 'tracking.perdevice', err });\n    node.send({\n        ack: false,\n        error: err,\n        ...ori,\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "c2af8c09210a4097"
            ]
        ],
        "icon": "font-awesome/fa-code-fork"
    },
    {
        "id": "73952f098b8ed22c",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.perdevice",
        "server": "0a8b482f55e0592d",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "bfe3ce28f29a69ae"
            ]
        ]
    },
    {
        "id": "d18b39342c8a59d3",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.division",
        "server": "8dad4b74fb298592",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "ba50707f8350607b"
            ]
        ]
    },
    {
        "id": "61a97b32b17dbf53",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "get block geojson",
        "func": "const couchdb = global.get('couchdb');\nlet ori = msg;\nlet { area } = msg.payload;\nlet { psm, estate, division } = area;\n\ncouchdb.view('smart-geojson', 'block', 'geo-by-division', {\n    key: [psm, estate, division]\n}).then(res => {\n    let geoBlocks = res.data.rows.map(x => x.value);\n    node.send({ ack: true, geoBlocks, ...ori }); /**acknowledge */\n}, (err) => {\n    node.error({ segment: 'filterby.division', err });\n    node.send({\n        error: err,\n        ack: false,\n        ...ori\n    })\n})\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "4a5542470e78ff1f"
            ]
        ],
        "icon": "font-awesome/fa-code-fork"
    },
    {
        "id": "ba3d896fdaf8eaeb",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.block",
        "server": "7a8729d72f970b40",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "62a7d89a51841542"
            ]
        ]
    },
    {
        "id": "b387dc3b8e3ba31b",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "send to worker",
        "func": "let ori = msg;\ntry {\n    let w = global.get('worker');\n    let worker = new w.Worker('./workers/w-geo.js');\n    let { date, ident, tracking, block } = msg.payload;\n\n    // Send a message to the worker thread\n    worker.postMessage({\n        func: 'checkLocationsInPloygon',\n        payload: {\n            locations: tracking,\n            geojson: block\n        }\n    });\n\n    worker.on('message', (result) => {\n        worker.terminate();\n        let { area, tracking } = result.data;\n        if (Array.isArray(tracking) && tracking.length > 0) {\n            ori.payload = {\n                date,\n                ident,\n                area,\n                tracking\n            }\n            node.send({ ack: true, ...ori }); /**acknowledge */\n        } else {\n            node.send({ ack: true, ...ori }); /**acknowledge */\n        }\n    });\n\n    worker.on('error', (err) => {\n        worker.terminate();\n        node.error({ segment: 'filterby.block', err });\n        node.send({\n            error: err,\n            ack: false,\n            ...ori\n        })\n    });\n} catch (err) {\n    node.error({ segment: 'filterby.block', err });\n    node.send({\n        error: err,\n        ack: false,\n        ...ori\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 580,
        "wires": [
            [
                "bafc614fbcb82f02"
            ]
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "b765932bf69d2d0f",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.tree",
        "server": "94497583e5725ee2",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "9650f01883ca82d9"
            ]
        ]
    },
    {
        "id": "2da97027bd0d7c7a",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "get tree geojson & send to worker",
        "func": "let ori = msg;\nlet payload = msg.payload;\ntry {\n    const couchdb = global.get('couchdb');\n    let w = global.get('worker');\n    let worker = new w.Worker('./workers/w-geo.js');\n\n    let { date, ident, area, tracking } = payload;\n    let { psm, estate, division, block } = area;\n    couchdb.view('smart-geojson', 'tree', 'geo-by-block', {\n        key: [psm, estate, division, block]\n    }).then(res => {\n        let geoTrees = res.data.rows?.map(x => x.value);\n        if (Array.isArray(geoTrees) && geoTrees.length > 0) {\n            // worker.postMessage({\n            //     func: 'checkLocationsInPoints',\n            //     payload: {\n            //         locations: tracking,\n            //         points: geoTrees,\n            //         radius: 4,\n            //         steps: 18\n            //     }\n            // });\n            worker.postMessage({\n                func: 'distance',\n                payload: {\n                    locations: tracking,\n                    geojson: geoTrees,\n                    distance: 4\n                }\n            });\n        } else {\n            node.send({ ack: true, ...ori }); /**acknowledge */\n        }\n    }, (err) => {\n        node.error({ segment: 'filterby.tree', err });\n        node.send({\n            error: err,\n            ack: false,\n            ...ori\n        })\n    });\n    worker.on('message', (res) => {\n        worker.terminate();\n        // let inRange = res.data;\n        let { inRange } = res.data;\n        node.warn(res);\n        if (res.data && Array.isArray(inRange) && inRange.length > 0) {\n            let docs = inRange.map(x => {\n                return { date, ident, ...x }\n            })\n            couchdb.bulk('temp02', docs)\n                .then(() => {\n                    node.send({ ack: true, ...ori }); /**acknowledge */\n                }, err => {\n                    node.error({ segment: 'filterby.tree:bulk-insert', err });\n                    node.send({\n                        error: err,\n                        ack: false,\n                        ...ori\n                    });\n                });\n        } else {\n            node.send({ ack: true, ...ori }); /**acknowledge */\n        }\n    });\n    worker.on('error', (err) => {\n        worker.terminate();\n        node.error({ segment: 'filterby.tree:worker-error', err });\n        node.send({\n            error: err,\n            ack: false,\n            ...ori\n        });\n    });\n} catch (err) {\n    node.error({ segment: 'filterby.tree', err });\n    node.send({\n        error: err,\n        ack: false,\n        ...ori\n    });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 780,
        "wires": [
            [
                "084f166599dd9ab2"
            ]
        ],
        "icon": "node-red/join.svg"
    },
    {
        "id": "996035da1afdd16a",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "d": true,
        "g": "96db80cb3d51c6c6",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.transaction",
        "server": "73a503547a572f1b",
        "x": 140,
        "y": 960,
        "wires": [
            [
                "652a4d3ed7d3a711"
            ]
        ]
    },
    {
        "id": "909f0bae520fb673",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "create transactions",
        "func": "let ori = msg.payload;\ntry {\n    const couchdb = global.get('couchdb');\n    let { date, ident, geofencing } = msg.payload;\n    let [nik, device, imei] = ident;\n    couchdb.view('transactions', 'filter', 'by-harvester-date', {\n        key: [ident[0], date]\n    }).then(res => {\n        let rs = [];\n        let existing = res.data.rows?.map(x => x.value);\n        geofencing.forEach(geof => {\n            let { psm, estate, division, block, tree, timestamp, event } = geof;\n            let transaction = existing.find(x => x.treeID == tree);\n            let isHarvested = Number(event) > 0;\n            if (!transaction) {\n                rs.push({\n                    treeID: tree,\n                    psm: psm,\n                    estate: estate,\n                    division: division,\n                    block: block,\n                    harvester: nik,\n                    harvested: Number(event),\n                    lastHarvested: (isHarvested) ? new Date(timestamp) : null,\n                    visited: 1,\n                    lastVisited: new Date(timestamp),\n                    createdBy: \"system\",\n                    createdDate: new Date(),\n                    modifiedBy: \"system\",\n                    modifiedDate: new Date(),\n                });\n            } else {\n                if (isHarvested) {\n                    transaction.harvested += Number(event);\n                    transaction.lastHarvested = new Date(timestamp);\n                }\n                transaction.visited++;\n                rs.push(transaction);\n            }\n        });\n        couchdb.bulk('transactions', rs).then(res => {\n            node.send({\n                payload: res.data,\n                ori\n            });\n        }, (err) => {\n            node.send({\n                error: err,\n                sendBack: true,\n                ori\n            })\n        });\n        node.send(msg);\n    }, (err) => {\n        node.send({\n            error: err,\n            sendBack: true,\n            ori\n        })\n    });\n} catch (err) {\n    node.send({\n        error: err,\n        sendBack: true,\n        ori\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 960,
        "wires": [
            [
                "d821f6f9cad4c1e3"
            ]
        ]
    },
    {
        "id": "d821f6f9cad4c1e3",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "error ? ",
        "property": "sendBack",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 1000,
        "wires": [
            [
                "2e87f501b0a0f94b"
            ],
            [
                "aee9d1bce03f6042"
            ]
        ]
    },
    {
        "id": "bfe3ce28f29a69ae",
        "type": "delay",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 120,
        "wires": [
            [
                "8f24af074f1a443c"
            ]
        ]
    },
    {
        "id": "ba50707f8350607b",
        "type": "delay",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 400,
        "wires": [
            [
                "61a97b32b17dbf53"
            ]
        ]
    },
    {
        "id": "583c321e926a7194",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "Nack",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.division",
        "nack": true,
        "server": "8dad4b74fb298592",
        "x": 630,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "75ddc81655b011e5",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.division",
        "nack": false,
        "server": "8dad4b74fb298592",
        "x": 690,
        "y": 360,
        "wires": [
            [
                "142059263db366f7"
            ]
        ]
    },
    {
        "id": "f837821d76ab526d",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.block",
        "server": "70620c4aa929b5d8",
        "x": 950,
        "y": 400,
        "wires": []
    },
    {
        "id": "62a7d89a51841542",
        "type": "delay",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 600,
        "wires": [
            [
                "b387dc3b8e3ba31b"
            ]
        ]
    },
    {
        "id": "f27b55e10b676cbc",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "Nack",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.block",
        "nack": true,
        "server": "7a8729d72f970b40",
        "x": 610,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "46f35e50e7239b03",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.block",
        "nack": false,
        "server": "7a8729d72f970b40",
        "x": 670,
        "y": 580,
        "wires": [
            [
                "74512cf78c05f502"
            ]
        ]
    },
    {
        "id": "8ab2f8087937a815",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.tree",
        "server": "70620c4aa929b5d8",
        "x": 660,
        "y": 620,
        "wires": []
    },
    {
        "id": "9650f01883ca82d9",
        "type": "delay",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 820,
        "wires": [
            [
                "2da97027bd0d7c7a"
            ]
        ]
    },
    {
        "id": "652a4d3ed7d3a711",
        "type": "delay",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "909f0bae520fb673"
            ]
        ]
    },
    {
        "id": "2e87f501b0a0f94b",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "not acknowlege",
        "func": "msg = msg.ori;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 980,
        "wires": [
            [
                "c88815bdc277d475"
            ]
        ]
    },
    {
        "id": "c88815bdc277d475",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.transaction",
        "nack": true,
        "server": "73a503547a572f1b",
        "x": 820,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "aee9d1bce03f6042",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "acknowlege",
        "func": "msg = msg.ori;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1020,
        "wires": [
            [
                "7470e87bc569f9a8"
            ]
        ]
    },
    {
        "id": "7470e87bc569f9a8",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.transaction",
        "nack": false,
        "server": "73a503547a572f1b",
        "x": 800,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "c2af8c09210a4097",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "acknowledge ?",
        "property": "ack",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 160,
        "wires": [
            [
                "19bc5810b2b9aee7",
                "036aac412f2ada03"
            ],
            [
                "a682597d72837a54"
            ]
        ]
    },
    {
        "id": "a682597d72837a54",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "Nack",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.perdevice",
        "nack": true,
        "server": "0a8b482f55e0592d",
        "x": 690,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "19bc5810b2b9aee7",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.perdevice",
        "nack": false,
        "server": "0a8b482f55e0592d",
        "x": 740,
        "y": 120,
        "wires": [
            [
                "46628c8f43849ad8"
            ]
        ]
    },
    {
        "id": "4a5542470e78ff1f",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "acknowledge ?",
        "property": "ack",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 440,
        "y": 400,
        "wires": [
            [
                "75ddc81655b011e5",
                "c7bb13b96f9452a1"
            ],
            [
                "583c321e926a7194"
            ]
        ]
    },
    {
        "id": "084f166599dd9ab2",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "acknowledge ?",
        "property": "ack",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 540,
        "y": 820,
        "wires": [
            [
                "6d5542a7141c4672"
            ],
            [
                "32bb7db17bf0aae4"
            ]
        ]
    },
    {
        "id": "6d5542a7141c4672",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.tree",
        "nack": false,
        "server": "94497583e5725ee2",
        "x": 760,
        "y": 800,
        "wires": [
            [
                "aa46181f2e4cf02e"
            ]
        ]
    },
    {
        "id": "32bb7db17bf0aae4",
        "type": "amqp ack",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.tree",
        "nack": true,
        "server": "94497583e5725ee2",
        "x": 760,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "bafc614fbcb82f02",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "acknowledge ?",
        "property": "ack",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 420,
        "y": 620,
        "wires": [
            [
                "8ab2f8087937a815",
                "46f35e50e7239b03"
            ],
            [
                "f27b55e10b676cbc"
            ]
        ]
    },
    {
        "id": "036aac412f2ada03",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "foreach >> sending...",
        "func": "try {\n    let { payload, geoDivisions } = msg;\n    if (Array.isArray(geoDivisions) && geoDivisions.length > 0) {\n        geoDivisions.forEach(geoDivision => {\n            node.send({ payload, geoDivision });\n        });\n    }\n} catch (err) {\n    node.error({ segment: 'tracking.perdevice', err });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "7461788f7573e617"
            ]
        ],
        "icon": "node-red-contrib-loop-processing/loop.png"
    },
    {
        "id": "7461788f7573e617",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "worker: checkLocationsInMultiPloygon",
        "func": "try {\n    let w = global.get('worker');\n    let worker = new w.Worker('./workers/w-geo.js');\n\n    let { payload, geoDivision } = msg;\n    let { date, series } = payload;\n    let [ident, longlat] = series;\n    worker.postMessage({\n        func: 'checkLocationsInMultiPloygon',\n        payload: {\n            locations: longlat,\n            multiPolygon: geoDivision\n        }\n    });\n    worker.on('message', (result) => {\n        worker.terminate();\n        let { area, tracking } = result.data;\n        if (Array.isArray(tracking) && tracking.length > 0) {\n            node.send({\n                payload: { date, ident, area, tracking }\n            });\n        }\n    });\n    worker.on('error', (err) => {\n        worker.terminate();\n        node.error({ segment: 'tracking.perdevice', err });\n    });\n} catch (err) {\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 200,
        "wires": [
            [
                "7bc55cf847260a66"
            ]
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "7bc55cf847260a66",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.division",
        "server": "70620c4aa929b5d8",
        "x": 1110,
        "y": 200,
        "wires": []
    },
    {
        "id": "c7bb13b96f9452a1",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "foreach >> sending...",
        "func": "try {\n    let { payload, geoBlocks } = msg;\n    if (Array.isArray(geoBlocks) && geoBlocks.length > 0) {\n        geoBlocks.forEach(block => {\n            node.send({\n                payload: { ...payload, block }\n            });\n        });\n    }\n} catch (err) {\n    node.error({ segment: 'tracking.perdevice', err });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 400,
        "wires": [
            [
                "f837821d76ab526d"
            ]
        ],
        "icon": "node-red-contrib-loop-processing/loop.png"
    },
    {
        "id": "46628c8f43849ad8",
        "type": "debug",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "142059263db366f7",
        "type": "debug",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 360,
        "wires": []
    },
    {
        "id": "74512cf78c05f502",
        "type": "debug",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 580,
        "wires": []
    },
    {
        "id": "aa46181f2e4cf02e",
        "type": "debug",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 800,
        "wires": []
    },
    {
        "id": "7caf168b939b9028",
        "type": "amqp in",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.smarttimeseries.to.redistimeseries",
        "server": "56e870f2a20cabb0",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "020716827bd6f57c"
            ]
        ]
    },
    {
        "id": "bb6860a59623cd4b",
        "type": "function",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "chunk data",
        "func": "let ori = msg;\nlet payload = msg.payload;\nconst chunkSize = 1000;\nconst delayBetweenChunks = 100;\ntry {\n  processArrayWithDelay(0);\n} catch (err) {\n  node.warn(err);\n}\n\nfunction processArrayWithDelay(startIndex) {\n  const endIndex = Math.min(startIndex + chunkSize, payload.length);\n  const chunk = payload.slice(startIndex, endIndex);\n\n  node.send({\n    payload: chunk\n  });\n\n  if (endIndex < payload.length) {\n    setTimeout(() => {\n      processArrayWithDelay(endIndex);\n    }, delayBetweenChunks);\n  }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "bafc0bcaf316df35"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f449ebb8cc8d7088",
        "type": "function",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "build create & add commands",
        "func": "let ori = msg;\ntry {\n    const redisTS = global.get('redisTS');\n    const w = global.get('worker');\n    const worker = new w.Worker('./workers/w-redis-ts.js', { workerData: 'send data csv to timeseries' });\n\n    redisTS.commands([['keys', 'wt:*']]).then(rs => {\n        let wtKeys = rs.data[0];\n        let payload = msg.payload;\n        let suffix = ['deviceDatetime', 'latitude', 'longitude', 'altitude', 'speed', 'event', 'battery'];\n        let addCommands = [];\n        let createPayload = [];\n\n        for (const rec of payload) {\n            let { deviceID, deviceDatetime, latitude, longitude, altitude, event, speed, battery } = rec;\n            if (deviceDatetime && deviceDatetime != null && deviceDatetime != \"\") {\n                suffix.forEach(suf => {\n                    if (!wtKeys.includes(`wt:${deviceID}:${suf}`) && createPayload.find(x => x.key == `wt:${deviceID}:${suf}`) == undefined) {\n                        createPayload.push({\n                            key: `wt:${deviceID}:${suf}`,\n                            retention: 0,\n                            duplicatePolicy: (suf != 'event') ? 'LAST' : 'SUM',\n                            labels: ['type', 'worker-tracker', 'deviceID', deviceID, 'topic', suf],\n                            encoding: 'UNCOMPRESSED'\n                        });\n                    }\n                })\n                addCommands.push([\n                    'TS.ADD',\n                    `wt:${deviceID}:deviceDatetime`,\n                    new Date(deviceDatetime).getTime().toString(),\n                    new Date(deviceDatetime).getTime().toString()\n                ]);\n                addCommands.push([\n                    'TS.ADD',\n                    `wt:${deviceID}:latitude`,\n                    new Date(deviceDatetime).getTime().toString(),\n                    parseFloat(latitude).toString()\n                ]);\n                addCommands.push([\n                    'TS.ADD',\n                    `wt:${deviceID}:longitude`,\n                    new Date(deviceDatetime).getTime().toString(),\n                    parseFloat(longitude).toString()\n                ]);\n                addCommands.push([\n                    'TS.ADD',\n                    `wt:${deviceID}:altitude`,\n                    new Date(deviceDatetime).getTime().toString(),\n                    parseFloat(altitude).toString()\n                ]);\n                addCommands.push([\n                    'TS.ADD',\n                    `wt:${deviceID}:speed`,\n                    new Date(deviceDatetime).getTime().toString(),\n                    parseFloat(speed).toString()\n                ]);\n                addCommands.push([\n                    'TS.ADD',\n                    `wt:${deviceID}:event`,\n                    new Date(deviceDatetime).getTime().toString(),\n                    parseFloat(event).toString()\n                ]);\n                addCommands.push([\n                    'TS.ADD',\n                    `wt:${deviceID}:battery`,\n                    new Date(deviceDatetime).getTime().toString(),\n                    parseFloat(battery).toString()\n                ]);\n            }\n        }\n\n        redisTS.tsCreate(createPayload).then(createRS => {\n            // Send a message to the worker thread\n            worker.postMessage({\n                func: 'commands',\n                payload: addCommands\n            });\n        }, (err) => {\n            node.send({ error: err, ack: false, ...ori })\n        });\n    }, (err) => {\n        node.send({ error: err, ack: false, ...ori })\n    });\n\n    worker.on('message', (result) => {\n        worker.terminate();\n        ori.payload = result;\n        node.send({ ack: true, ...ori });\n    });\n    worker.on('error', (err) => {\n        worker.terminate();\n        node.send({ error: err, ack: false, ...ori })\n    })\n} catch (err) {\n    node.send({ error: err, ack: false, ...ori })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 420,
        "wires": [
            [
                "a367101b418a89b8"
            ]
        ],
        "icon": "font-awesome/fa-code-fork"
    },
    {
        "id": "3fcc35deba3e1da9",
        "type": "amqp in",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.series.chunk",
        "server": "5471df75ac676292",
        "x": 260,
        "y": 420,
        "wires": [
            [
                "c26a5a59558077e8"
            ]
        ]
    },
    {
        "id": "bafc0bcaf316df35",
        "type": "amqp out",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.series.chunk",
        "server": "f7b36a35cf0d6417",
        "x": 500,
        "y": 340,
        "wires": []
    },
    {
        "id": "e3a50e6cb96cc3b3",
        "type": "amqp in",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.smartbucket.to.smarttimeseries",
        "server": "e907ba5364e5896f",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "bcecd284253e3eb6"
            ]
        ]
    },
    {
        "id": "dd42509446494f20",
        "type": "function",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "bulk insert",
        "func": "let ori = msg;\ntry {\n    const couchdb = global.get('couchdb');\n\n    couchdb.bulk('smart-timeseries', msg.payload)\n        .then(() => {\n            node.send({ ack: true, ...ori });\n        }, (err) => {\n            node.send({\n                error: err,\n                ack: false,\n                ...ori\n            })\n        });\n} catch (err) {\n    node.send({\n        error: err,\n        ack: false,\n        ...ori\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 120,
        "wires": [
            [
                "80f39477122f0d22"
            ]
        ]
    },
    {
        "id": "0337520c937b5a0c",
        "type": "comment",
        "z": "9ba7388927fccc31",
        "name": "How to manual Acknowledge",
        "info": "## How to manual Acknowledge\nset source connection to be Prefetch = 1, without AckTimeout\nafter amqp-in set delay node and set timer\nmake sure to use amqp ack to Acknowledge,\neither success or failed the process",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "bcecd284253e3eb6",
        "type": "delay",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 160,
        "wires": [
            [
                "dd42509446494f20"
            ]
        ]
    },
    {
        "id": "020716827bd6f57c",
        "type": "delay",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 340,
        "wires": [
            [
                "bb6860a59623cd4b"
            ]
        ]
    },
    {
        "id": "c26a5a59558077e8",
        "type": "delay",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 460,
        "wires": [
            [
                "f449ebb8cc8d7088"
            ]
        ]
    },
    {
        "id": "80f39477122f0d22",
        "type": "switch",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "acknowledge ?",
        "property": "ack",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 160,
        "wires": [
            [
                "e9b2695be28f6292"
            ],
            [
                "c5e024b4ad9d61e7"
            ]
        ]
    },
    {
        "id": "e9b2695be28f6292",
        "type": "amqp ack",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.smartbucket.to.smarttimeseries",
        "nack": false,
        "server": "e907ba5364e5896f",
        "x": 740,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c5e024b4ad9d61e7",
        "type": "amqp ack",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "Nack",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.smartbucket.to.smarttimeseries",
        "nack": true,
        "server": "e907ba5364e5896f",
        "x": 650,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8328e04150db13b5",
        "type": "inject",
        "z": "9ba7388927fccc31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 680,
        "wires": [
            [
                "a6ef5185b3ad713f"
            ]
        ]
    },
    {
        "id": "a6ef5185b3ad713f",
        "type": "function",
        "z": "9ba7388927fccc31",
        "name": "function 1",
        "func": "const redisTS = global.get('redisTS');\n\nlet d = new Date()\n\nredisTS.commands([\n    ['TS.MRANGE', '1705338000000', '1705424399999', 'FILTER', 'deviceID=wt0040'],\n    ['TS.MRANGE', '1705424400000', '1705510799999', 'FILTER', 'deviceID=wt0040']\n]).then(res => {\n    node.warn(res);\n}, err => {\n    node.error(err)\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "e057ad1e131c55ee",
        "type": "function",
        "z": "9ba7388927fccc31",
        "name": "ts.add data series",
        "func": "try {\n    if (msg.error == undefined) {\n        const w = global.get('worker');\n        const worker = new w.Worker('./workers/w-redis-ts.js', { workerData: 'send data csv to timeseries' });\n\n        worker.on('message', (result) => {\n            worker.terminate();\n            node.send({ payload: result });\n        });\n        worker.on('error', (err) => {\n            worker.terminate();\n            node.send({\n                payload: msg.payload,\n                error: err\n            })\n        })\n\n        // Send a message to the worker thread\n        worker.postMessage({\n            func: 'commands',\n            payload: msg.payload\n        });\n    }\n} catch (err) {\n    node.send({\n        payload: msg.payload,\n        error: err\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 640,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "a367101b418a89b8",
        "type": "switch",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "acknowledge ?",
        "property": "ack",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 460,
        "wires": [
            [
                "9596044b29bc782f"
            ],
            [
                "ec839a96c93d00fb"
            ]
        ]
    },
    {
        "id": "9596044b29bc782f",
        "type": "amqp ack",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.series.chunk",
        "nack": false,
        "server": "5471df75ac676292",
        "x": 800,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ec839a96c93d00fb",
        "type": "amqp ack",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "Nack",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.series.chunk",
        "nack": false,
        "server": "5471df75ac676292",
        "x": 770,
        "y": 480,
        "wires": [
            []
        ]
    }
]