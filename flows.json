[
    {
        "id": "06c72d44e5729b2a",
        "type": "tab",
        "label": "wt: geofencing",
        "disabled": false,
        "info": "# localhost #1\n\n    `\n    prefetch data dari queue 1 message / 15 seconds\n    `\n\n# locahost #2\n\n    `\n    prefetch data dari queue 1 message / 5 seconds\n    `\n\n# locahost #3\n\n    `\n    prefetch data dari queue 1 message / 3 seconds\n    `\n\n# locahost:last\n\n    `\n    no prefetch for all flows\n    `\n\n// nrlint function-eslint:off\n",
        "env": []
    },
    {
        "id": "9ba7388927fccc31",
        "type": "tab",
        "label": "wt: series",
        "disabled": false,
        "info": "# localhost #1\n\n    `\n    prefetch data dari queue 1 message / 5 seconds\n    `\n\n# locahost #2\n\n    `\n    prefetch data dari queue 1 message / 17 seconds\n    `\n\n# localhost:last\n\n    `\n    no prefetch for all flows\n    `\n\n// nrlint function-eslint:off\n",
        "env": []
    },
    {
        "id": "2becf7ecab3a6f09",
        "type": "tab",
        "label": "vm: series",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ef0e7b589320b81a",
        "type": "subflow",
        "name": "sub: couchdb-insert",
        "info": "# Input\n\n### msg.sub\n\n    {\n        database: 'smart-bucket',\n        doc: {}\n    }\n\n// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "6ae3265eb63f2da2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 160,
                "wires": [
                    {
                        "id": "447e985e09671110",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFAAAA"
    },
    {
        "id": "89ff6cae3b742adc",
        "type": "group",
        "z": "9ba7388927fccc31",
        "name": "wt: smarttimeseris to redistimeseries",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "fill-opacity": "0.4",
            "color": "#ff0000",
            "stroke": "none"
        },
        "nodes": [
            "7caf168b939b9028",
            "bb6860a59623cd4b",
            "f449ebb8cc8d7088",
            "e057ad1e131c55ee",
            "3fcc35deba3e1da9",
            "bafc0bcaf316df35",
            "dce20e17ce373f6d",
            "55430bbd67084deb",
            "36bbf34f8f4ec2ac",
            "bd7d3d7fe33f261b"
        ],
        "x": 14,
        "y": 339,
        "w": 1072,
        "h": 242
    },
    {
        "id": "9f1e98d4426d35e3",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: get divisions in estate and filter longlat by division",
        "style": {
            "label": true,
            "stroke": "none",
            "color": "#ff0000",
            "fill": "#c8e7a7",
            "fill-opacity": "0.5"
        },
        "nodes": [
            "e8c0683cc5f8df67",
            "8f24af074f1a443c",
            "55ed1342d1fd4d9c",
            "73952f098b8ed22c",
            "03e630b763e1fad0",
            "8355d6c2d3494ee7",
            "e7dcaf026846bb1c",
            "762ef0203613776d"
        ],
        "x": 34,
        "y": 79,
        "w": 752,
        "h": 202
    },
    {
        "id": "48e7b095e8d92958",
        "type": "group",
        "z": "9ba7388927fccc31",
        "name": "smartbucket.to.smarttimeseries",
        "style": {
            "stroke": "none",
            "fill": "#e3f3d3",
            "fill-opacity": "0.45",
            "label": true,
            "color": "#ff3f3f"
        },
        "nodes": [
            "e3a50e6cb96cc3b3",
            "dd42509446494f20",
            "248c25e4d88ba52f",
            "c7bc8f0da817a8a1",
            "1035dda52d64f81f",
            "d2ee66a5416bd52f"
        ],
        "x": 14,
        "y": 79,
        "w": 832,
        "h": 202
    },
    {
        "id": "bf7019fa94e27678",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: chunk job from division",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#c8e7a7",
            "fill-opacity": "0.5",
            "color": "#ff3f3f"
        },
        "nodes": [
            "d18b39342c8a59d3",
            "61a97b32b17dbf53",
            "da91dddbdc52b6b0",
            "e5902ab2e5a442ed",
            "dcab231f242dffc6",
            "f837821d76ab526d",
            "074f12192bc2b669"
        ],
        "x": 34,
        "y": 339,
        "w": 732,
        "h": 202
    },
    {
        "id": "675a034d3ec876e6",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: filter longlat by block and chunk ",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#c8e7a7",
            "fill-opacity": "0.48",
            "color": "#ff3f3f"
        },
        "nodes": [
            "ba3d896fdaf8eaeb",
            "b387dc3b8e3ba31b",
            "e24a92cbea2dda17",
            "e37bbc66e56dd4ba",
            "6af606d2c8e820c3",
            "8ab2f8087937a815",
            "20cfbbe2cba42572"
        ],
        "x": 34,
        "y": 599,
        "w": 712,
        "h": 202
    },
    {
        "id": "8913e09cb6434789",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: load chunk and filter longlat by trees inside block",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#c8e7a7",
            "fill-opacity": "0.48",
            "color": "#ff3f3f"
        },
        "nodes": [
            "b765932bf69d2d0f",
            "2da97027bd0d7c7a",
            "5c21ea28c38aab09",
            "c9e177305f909c86",
            "c3ba33ccf69567cd",
            "85c63351f4dbcb6a",
            "c89e45c73f0511d6",
            "2fc4962bc9f4b887",
            "4b898ccf9f8a0eaa"
        ],
        "x": 34,
        "y": 859,
        "w": 732,
        "h": 242
    },
    {
        "id": "96db80cb3d51c6c6",
        "type": "group",
        "z": "06c72d44e5729b2a",
        "name": "wt: geofencing and create transaction",
        "style": {
            "stroke": "none",
            "fill": "#c8e7a7",
            "fill-opacity": "0.45",
            "label": true,
            "color": "#ff3f3f"
        },
        "nodes": [
            "996035da1afdd16a",
            "909f0bae520fb673",
            "d821f6f9cad4c1e3",
            "3e4daddff5e5ad16",
            "c31749368d55472c",
            "81a6112a04ada68d"
        ],
        "x": 34,
        "y": 1159,
        "w": 652,
        "h": 202
    },
    {
        "id": "60b254c433dfc6f4",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "30000"
    },
    {
        "id": "a71ab4cd6eb395c0",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "5000"
    },
    {
        "id": "317dcd65d78d7168",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "15000"
    },
    {
        "id": "e907ba5364e5896f",
        "type": "amqp-server",
        "z": "9ba7388927fccc31",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "5000"
    },
    {
        "id": "70620c4aa929b5d8",
        "type": "amqp-server",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": false,
        "prefetchvalue": "1",
        "prefetchack": false,
        "prefetchvalueack": "10"
    },
    {
        "id": "56e870f2a20cabb0",
        "type": "amqp-server",
        "z": "9ba7388927fccc31",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "10000"
    },
    {
        "id": "5c5f4a38e92ed986",
        "type": "amqp-server",
        "z": "06c72d44e5729b2a",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "3000"
    },
    {
        "id": "5471df75ac676292",
        "type": "amqp-server",
        "z": "9ba7388927fccc31",
        "host": "${BROKER_DOMAIN}",
        "port": "${BROKER_PORT}",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}",
        "prefetch": true,
        "prefetchvalue": "1",
        "prefetchack": true,
        "prefetchvalueack": "5000"
    },
    {
        "id": "e42544d355f50764",
        "type": "http request",
        "z": "ef0e7b589320b81a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 120,
        "wires": [
            [
                "447e985e09671110"
            ]
        ]
    },
    {
        "id": "6ae3265eb63f2da2",
        "type": "function",
        "z": "ef0e7b589320b81a",
        "name": "read sub",
        "func": "msg.backup = msg.payload;\n\nlet { database, doc } = msg.sub;\nmsg.payload = doc;\nmsg.headers = {\n    \"Authorization\": \"Basic \" +\n        Buffer.from(`${env.get('DOCS_MASTER_USER')}:${env.get('DOCS_MASTER_PASSWORD')}`).toString(\"base64\"),\n    \"Content-Type\": \"application/json; charset=utf-8\"\n}\nmsg.url = `${env.get('DOC_MASTER_DOMAIN')}/${database}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "e42544d355f50764"
            ]
        ]
    },
    {
        "id": "447e985e09671110",
        "type": "function",
        "z": "ef0e7b589320b81a",
        "name": "result",
        "func": "msg.sub = JSON.parse(msg.payload);\nmsg.payload = msg.backup;\ndelete msg.backup;\ndelete msg.url;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e8c0683cc5f8df67",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "send to worker",
        "func": "try {\n    if (msg.error == undefined) {\n        let w = global.get('worker');\n        let worker = new w.Worker('./workers/w-geo.js');\n        let { date, series } = msg.payload;\n        let [ident, tracking] = series;\n\n        worker.on('message', (result) => {\n            worker.terminate();\n            let { area, tracking } = result.data;\n            if (Array.isArray(tracking) && tracking.length > 0) {\n                node.send({\n                    payload: { date, ident, area, tracking }\n                });\n            }\n        });\n        worker.on('error', (err) => {\n            worker.terminate();\n            node.send({\n                payload: msg.payload,\n                error: err\n            })\n        })\n\n        // Send a message to the worker thread\n        worker.postMessage({\n            func: 'checkLocationsInMultiPloygon',\n            payload: {\n                locations: tracking,\n                multiPolygon: msg.geoDivision\n            }\n        });\n    }\n} catch (err) {\n    node.send({\n        payload: msg.payload,\n        error: err\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 220,
        "wires": [
            [
                "03e630b763e1fad0"
            ]
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "8f24af074f1a443c",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "get SMSE divisions geojson",
        "func": "const couchdb = global.get('couchdb');\ncouchdb.view('smart-geojson', 'division', 'geo-by-estate', {\n    key: ['PSM 2', \"SMSE\"]\n}).then(res => {\n    res.data.rows.map(x => x.value).forEach(div => {\n        msg.geoDivision = div;\n        node.send(msg);\n    });\n}, (err) => {\n    node.send({\n        payload: msg.payload,\n        error: err\n    })\n})\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 180,
        "wires": [
            [
                "03e630b763e1fad0",
                "e8c0683cc5f8df67"
            ]
        ],
        "icon": "font-awesome/fa-code-fork"
    },
    {
        "id": "55ed1342d1fd4d9c",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.division",
        "server": "70620c4aa929b5d8",
        "x": 650,
        "y": 240,
        "wires": []
    },
    {
        "id": "73952f098b8ed22c",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.perdevice",
        "server": "60b254c433dfc6f4",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "8f24af074f1a443c"
            ]
        ]
    },
    {
        "id": "03e630b763e1fad0",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "error ? ",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 180,
        "wires": [
            [
                "8355d6c2d3494ee7",
                "762ef0203613776d"
            ],
            [
                "55ed1342d1fd4d9c"
            ]
        ]
    },
    {
        "id": "8355d6c2d3494ee7",
        "type": "debug",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "e7dcaf026846bb1c",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.perdevice",
        "server": "70620c4aa929b5d8",
        "x": 640,
        "y": 200,
        "wires": []
    },
    {
        "id": "762ef0203613776d",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "9f1e98d4426d35e3",
        "name": "send back payload",
        "func": "let {payload} = msg.payload;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 160,
        "wires": [
            [
                "e7dcaf026846bb1c"
            ]
        ]
    },
    {
        "id": "87d68a8c119fefa3",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "name": "pra-trans",
        "func": "msg.sub = {\n    database: 'pra-trans',\n    doc: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1200,
        "wires": [
            [
                "f602804499675a85"
            ]
        ]
    },
    {
        "id": "f602804499675a85",
        "type": "subflow:ef0e7b589320b81a",
        "z": "06c72d44e5729b2a",
        "name": "",
        "x": 810,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "f125be1c760a4dd2",
        "type": "comment",
        "z": "06c72d44e5729b2a",
        "name": "",
        "info": "## wt.tracking.perdevice\n1 message / 30 seconds\n\n## wt.tracking.filterby.division\n1 message / 5 seconds\n\n## wt.tracking.send.block\n1 message / 3 seconds\n\n## wt.tracking.filterby.block\n1 message / 15 seconds\n\n## wt.tracking.filterby.block\n1 message / 15 second\n\n",
        "x": 100,
        "y": 40,
        "wires": []
    },
    {
        "id": "d18b39342c8a59d3",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.division",
        "server": "a71ab4cd6eb395c0",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "61a97b32b17dbf53"
            ]
        ]
    },
    {
        "id": "61a97b32b17dbf53",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "get block geojson",
        "func": "const couchdb = global.get('couchdb');\nlet { date, ident, area, tracking } = msg.payload;\nlet { psm, estate, division } = area;\n\ncouchdb.view('smart-geojson', 'block', 'geo-by-division', {\n    key: [psm, estate, division]\n}).then(res => {\n    res.data.rows.map(x => x.value).forEach(block => {\n        node.send({ date, ident, tracking, block });\n    });\n}, (err) => {\n    node.send({\n        payload: msg.payload,\n        error: err\n    })\n})\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 440,
        "wires": [
            [
                "da91dddbdc52b6b0"
            ]
        ]
    },
    {
        "id": "da91dddbdc52b6b0",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "error ? ",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 440,
        "wires": [
            [
                "e5902ab2e5a442ed",
                "dcab231f242dffc6"
            ],
            [
                "f837821d76ab526d"
            ]
        ]
    },
    {
        "id": "e5902ab2e5a442ed",
        "type": "debug",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 380,
        "wires": []
    },
    {
        "id": "dcab231f242dffc6",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "send back payload",
        "func": "let {payload} = msg.payload;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 420,
        "wires": [
            [
                "074f12192bc2b669"
            ]
        ]
    },
    {
        "id": "f837821d76ab526d",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.send.block",
        "server": "70620c4aa929b5d8",
        "x": 620,
        "y": 500,
        "wires": []
    },
    {
        "id": "074f12192bc2b669",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "bf7019fa94e27678",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.division",
        "server": "70620c4aa929b5d8",
        "x": 630,
        "y": 460,
        "wires": []
    },
    {
        "id": "ba3d896fdaf8eaeb",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.send.block",
        "server": "5c5f4a38e92ed986",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "b387dc3b8e3ba31b"
            ]
        ]
    },
    {
        "id": "b387dc3b8e3ba31b",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "send to worker",
        "func": "try {\n    let w = global.get('worker');\n    let worker = new w.Worker('./workers/w-geo.js');\n    let { date, ident, tracking, block } = msg.payload;\n\n    // Send a message to the worker thread\n    worker.postMessage({\n        func: 'checkLocationsInPloygon',\n        payload: {\n            locations: tracking,\n            geojson: block\n        }\n    });\n\n    worker.on('message', (result) => {\n        worker.terminate();\n        let { area, tracking } = result.data;\n        if (Array.isArray(tracking) && tracking.length > 0) {\n            node.send({\n                payload: {\n                    date,\n                    ident,\n                    area,\n                    tracking\n                }\n            });\n        }\n    });\n\n    worker.on('error', (err) => {\n        worker.terminate();\n        node.send({\n            payload: msg.payload,\n            error: err\n        })\n    });\n} catch (err) {\n    node.send({\n        payload: msg.payload,\n        error: err\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 700,
        "wires": [
            [
                "e24a92cbea2dda17"
            ]
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "e24a92cbea2dda17",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "error ? ",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 700,
        "wires": [
            [
                "e37bbc66e56dd4ba",
                "6af606d2c8e820c3"
            ],
            [
                "8ab2f8087937a815"
            ]
        ]
    },
    {
        "id": "e37bbc66e56dd4ba",
        "type": "debug",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 640,
        "wires": []
    },
    {
        "id": "6af606d2c8e820c3",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "send back payload",
        "func": "let {payload} = msg.payload;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 680,
        "wires": [
            [
                "20cfbbe2cba42572"
            ]
        ]
    },
    {
        "id": "8ab2f8087937a815",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.block",
        "server": "70620c4aa929b5d8",
        "x": 610,
        "y": 760,
        "wires": []
    },
    {
        "id": "20cfbbe2cba42572",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "675a034d3ec876e6",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.send.block",
        "server": "70620c4aa929b5d8",
        "x": 600,
        "y": 720,
        "wires": []
    },
    {
        "id": "b765932bf69d2d0f",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.block",
        "server": "317dcd65d78d7168",
        "x": 170,
        "y": 900,
        "wires": [
            [
                "2da97027bd0d7c7a"
            ]
        ]
    },
    {
        "id": "2da97027bd0d7c7a",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "get tree geojson",
        "func": "const couchdb = global.get('couchdb');\nlet { date, ident, area } = msg.payload;\nlet { psm, estate, division, block } = area;\n\ncouchdb.view('smart-geojson', 'tree', 'geo-by-block', {\n    key: [psm, estate, division, block]\n}).then(res => {\n    msg.geoTree = res.data.rows?.map(x => x.value);\n    node.send(msg);\n}, (err) => {\n    node.send({\n        payload: msg.payload,\n        error: err\n    })\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 940,
        "wires": [
            [
                "5c21ea28c38aab09",
                "c9e177305f909c86"
            ]
        ]
    },
    {
        "id": "5c21ea28c38aab09",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "send to worker",
        "func": "try {\n    if (msg.error == undefined) {\n        let w = global.get('worker');\n        let worker = new w.Worker('./workers/w-geo.js');\n        let { date, ident, tracking } = msg.payload;\n        let geoTree = msg.geoTree;\n\n        worker.on('message', (result) => {\n            worker.terminate();\n            if (result.data && Array.isArray(result.data.inrange) && result.data.inrange.length > 0) {\n                node.send({\n                    payload: {\n                        date,\n                        ident,\n                        geofencing: result.data\n                    }\n                });\n            }\n        });\n        worker.on('error', (err) => {\n            worker.terminate();\n            node.send({\n                payload: msg.payload,\n                error: err\n            })\n        })\n\n        // Send a message to the worker thread\n        if (Array.isArray(geoTree) && geoTree.length > 0) {\n            worker.postMessage({\n                func: 'distance',\n                payload: {\n                    locations: tracking,\n                    geojson: geoTree,\n                    distance: 4\n                }\n            });\n        }\n        return null;\n    }\n} catch (err) {\n    node.send({\n        payload: msg.payload,\n        error: err\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 980,
        "wires": [
            [
                "c9e177305f909c86"
            ]
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "c9e177305f909c86",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "error ? ",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 960,
        "wires": [
            [
                "c3ba33ccf69567cd",
                "85c63351f4dbcb6a"
            ],
            [
                "c89e45c73f0511d6"
            ]
        ]
    },
    {
        "id": "c3ba33ccf69567cd",
        "type": "debug",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 900,
        "wires": []
    },
    {
        "id": "85c63351f4dbcb6a",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "send back payload",
        "func": "let {payload} = msg.payload;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 940,
        "wires": [
            [
                "2fc4962bc9f4b887"
            ]
        ]
    },
    {
        "id": "c89e45c73f0511d6",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "select inrange",
        "func": "let { date, ident, geofencing } = msg.payload\ngeofencing = geofencing.inrange\nnode.send({ date, ident, geofencing });\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1020,
        "wires": [
            [
                "4b898ccf9f8a0eaa"
            ]
        ]
    },
    {
        "id": "2fc4962bc9f4b887",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.tracking.filterby.block",
        "server": "70620c4aa929b5d8",
        "x": 630,
        "y": 980,
        "wires": []
    },
    {
        "id": "4b898ccf9f8a0eaa",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "8913e09cb6434789",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.transaction",
        "server": "70620c4aa929b5d8",
        "x": 600,
        "y": 1060,
        "wires": []
    },
    {
        "id": "996035da1afdd16a",
        "type": "amqp in",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.transaction",
        "server": "5c5f4a38e92ed986",
        "x": 160,
        "y": 1200,
        "wires": [
            [
                "909f0bae520fb673"
            ]
        ]
    },
    {
        "id": "909f0bae520fb673",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "create transactions",
        "func": "let ori = msg.payload;\ntry {\n    const couchdb = global.get('couchdb');\n\n    let { date, ident, geofencing } = msg.payload;\n    let [nik, device, imei] = ident;\n    couchdb.view('transactions', 'filter', 'by-harvester-date', {\n        key: [ident[0], date]\n    }).then(res => {\n        let rs = res.data.rows?.map(x => x.value);\n        geofencing.forEach(geof => {\n            let { psm, estate, division, block, tree, timestamp, event } = geof;\n            let transaction = rs.find(x => x.treeID == tree);\n            let isHarvested = Number(event) > 0;\n            if (!transaction) {\n                rs.push({\n                    treeID: tree,\n                    psm: psm,\n                    estate: estate,\n                    division: division,\n                    block: block,\n                    harvester: nik,\n                    harvested: Number(event),\n                    lastHarvested: (isHarvested) ? new Date(timestamp) : null,\n                    visited: 1,\n                    lastVisited: new Date(timestamp),\n                    createdBy: \"system\",\n                    createdDate: new Date(),\n                    modifiedBy: \"system\",\n                    modifiedDate: new Date(),\n                });\n            } else {\n                if (isHarvested) {\n                    transaction.harvested += Number(event);\n                    transaction.lastHarvested = new Date(timestamp);\n                }\n                transaction.visited++;\n            }\n        });\n\n        couchdb.bulk('transactions', rs).then(res => {\n            node.send({\n                payload: res.data\n            });\n        }, (err) => {\n            node.send({\n                payload: ori,\n                error: err\n            })\n        });\n        node.send(msg);\n    }, (err) => {\n        node.send({\n            payload: ori,\n            error: err\n        })\n    });\n} catch (err) {\n    node.send({\n        payload: ori,\n        error: err\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1240,
        "wires": [
            [
                "d821f6f9cad4c1e3"
            ]
        ]
    },
    {
        "id": "d821f6f9cad4c1e3",
        "type": "switch",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "error ? ",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 1240,
        "wires": [
            [
                "3e4daddff5e5ad16",
                "c31749368d55472c"
            ]
        ]
    },
    {
        "id": "3e4daddff5e5ad16",
        "type": "debug",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 1240,
        "wires": []
    },
    {
        "id": "c31749368d55472c",
        "type": "function",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "send back payload",
        "func": "let {payload} = msg.payload;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1280,
        "wires": [
            [
                "81a6112a04ada68d"
            ]
        ]
    },
    {
        "id": "81a6112a04ada68d",
        "type": "amqp out",
        "z": "06c72d44e5729b2a",
        "g": "96db80cb3d51c6c6",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.transaction",
        "server": "70620c4aa929b5d8",
        "x": 560,
        "y": 1320,
        "wires": []
    },
    {
        "id": "7caf168b939b9028",
        "type": "amqp in",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.smarttimeseries.to.redistimeseries",
        "server": "e907ba5364e5896f",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "bb6860a59623cd4b"
            ]
        ]
    },
    {
        "id": "bb6860a59623cd4b",
        "type": "function",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "chunk data",
        "func": "let payload = msg.payload;\n\nconst chunkSize = 1000;\nconst delayBetweenChunks = 1000;\n\nfunction processArrayWithDelay(startIndex) {\n  const endIndex = Math.min(startIndex + chunkSize, payload.length);\n  const chunk = payload.slice(startIndex, endIndex);\n\n  node.send({\n    payload: chunk\n  });\n\n  if (endIndex < payload.length) {\n    setTimeout(() => {\n      processArrayWithDelay(endIndex);\n    }, delayBetweenChunks);\n  }\n}\n\n// Start processing the array with a delay\nprocessArrayWithDelay(0);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 420,
        "wires": [
            [
                "bafc0bcaf316df35"
            ]
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f449ebb8cc8d7088",
        "type": "function",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "build create & add commands",
        "func": "const redisTS = global.get('redisTS');\nlet ori = msg.payload;\n\nredisTS.commands([['keys', 'wt:*']]).then(rs => {\n    let wtKeys = rs.data[0];\n    let payload = msg.payload;\n    let suffix = ['deviceDatetime', 'latitude', 'longitude', 'altitude', 'speed', 'event', 'battery'];\n    let addCommands = [];\n    let createPayload = [];\n\n    for (const rec of payload) {\n        let { deviceID, deviceDatetime, latitude, longitude, altitude, event, speed, battery } = rec;\n        if (deviceDatetime && deviceDatetime != null && deviceDatetime != \"\") {\n            suffix.forEach(suf => {\n                if (!wtKeys.includes(`wt:${deviceID}:${suf}`) && createPayload.find(x => x.key == `wt:${deviceID}:${suf}`) == undefined) {\n                    createPayload.push({\n                        key: `wt:${deviceID}:${suf}`,\n                        retention: 0,\n                        duplicatePolicy: (suf != 'event') ? 'LAST' : 'SUM',\n                        labels: ['type', 'worker-tracker', 'deviceID', deviceID, 'topic', suf],\n                        encoding: 'UNCOMPRESSED'\n                    });\n                }\n            })\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:deviceDatetime`,\n                new Date(deviceDatetime).getTime().toString(),\n                new Date(deviceDatetime).getTime().toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:latitude`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(latitude).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:longitude`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(longitude).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:altitude`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(altitude).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:speed`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(speed).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:event`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(event).toString()\n            ]);\n            addCommands.push([\n                'TS.ADD',\n                `wt:${deviceID}:battery`,\n                new Date(deviceDatetime).getTime().toString(),\n                parseFloat(battery).toString()\n            ]);\n        }\n    }\n\n    redisTS.tsCreate(createPayload).then(createRS => {\n        msg.payload = addCommands;\n        node.send(msg);\n    }, (err) => {\n        node.send({\n            payload: ori,\n            error: err\n        })\n    });\n}, (err) => {\n    node.send({\n        payload: ori,\n        error: err\n    })\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 500,
        "wires": [
            [
                "e057ad1e131c55ee",
                "dce20e17ce373f6d"
            ]
        ],
        "icon": "font-awesome/fa-code-fork"
    },
    {
        "id": "e057ad1e131c55ee",
        "type": "function",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "ts.add data series",
        "func": "try {\n    if (msg.error == undefined) {\n        const w = global.get('worker');\n        const worker = new w.Worker('./workers/w-redis-ts.js', { workerData: 'send data csv to timeseries' });\n\n        worker.on('message', (result) => {\n            worker.terminate();\n            node.send({ payload: result });\n        });\n        worker.on('error', (err) => {\n            worker.terminate();\n            node.send({\n                payload: msg.payload,\n                error: err\n            })\n        })\n\n        // Send a message to the worker thread\n        worker.postMessage({\n            func: 'commands',\n            payload: msg.payload\n        });\n    }\n} catch (err) {\n    node.send({\n        payload: msg.payload,\n        error: err\n    })\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 540,
        "wires": [
            [
                "dce20e17ce373f6d"
            ]
        ],
        "icon": "font-awesome/fa-qrcode"
    },
    {
        "id": "3fcc35deba3e1da9",
        "type": "amqp in",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.series.chunk",
        "server": "56e870f2a20cabb0",
        "x": 260,
        "y": 500,
        "wires": [
            [
                "f449ebb8cc8d7088"
            ]
        ]
    },
    {
        "id": "bafc0bcaf316df35",
        "type": "amqp out",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.series.chunk",
        "server": "70620c4aa929b5d8",
        "x": 480,
        "y": 420,
        "wires": []
    },
    {
        "id": "e3a50e6cb96cc3b3",
        "type": "amqp in",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "wt.smartbucket.to.smarttimeseries",
        "server": "5471df75ac676292",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "dd42509446494f20"
            ]
        ]
    },
    {
        "id": "dd42509446494f20",
        "type": "function",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "bulk insert",
        "func": "const couchdb = global.get('couchdb');\n\ncouchdb.bulk('smart-timeseries', msg.payload)\n    .then(() => { }, (err) => {\n        node.send({\n            payload: msg.payload,\n            error: err\n        })\n    })\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 160,
        "wires": [
            [
                "248c25e4d88ba52f"
            ]
        ]
    },
    {
        "id": "248c25e4d88ba52f",
        "type": "switch",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "error ? ",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 160,
        "wires": [
            [
                "c7bc8f0da817a8a1",
                "d2ee66a5416bd52f"
            ]
        ]
    },
    {
        "id": "c7bc8f0da817a8a1",
        "type": "debug",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 160,
        "wires": []
    },
    {
        "id": "1035dda52d64f81f",
        "type": "amqp out",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.smartbucket.to.smarttimeseries",
        "server": "70620c4aa929b5d8",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "d2ee66a5416bd52f",
        "type": "function",
        "z": "9ba7388927fccc31",
        "g": "48e7b095e8d92958",
        "name": "send back payload",
        "func": "let {payload} = msg.payload;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 200,
        "wires": [
            [
                "1035dda52d64f81f"
            ]
        ]
    },
    {
        "id": "dce20e17ce373f6d",
        "type": "switch",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "error ? ",
        "property": "payload.error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 500,
        "wires": [
            [
                "55430bbd67084deb",
                "bd7d3d7fe33f261b"
            ]
        ]
    },
    {
        "id": "55430bbd67084deb",
        "type": "debug",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 460,
        "wires": []
    },
    {
        "id": "36bbf34f8f4ec2ac",
        "type": "amqp out",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "",
        "routingkey": "",
        "iotype": "4",
        "ioname": "wt.series.chunk",
        "server": "70620c4aa929b5d8",
        "x": 960,
        "y": 540,
        "wires": []
    },
    {
        "id": "bd7d3d7fe33f261b",
        "type": "function",
        "z": "9ba7388927fccc31",
        "g": "89ff6cae3b742adc",
        "name": "send back payload",
        "func": "let {payload} = msg.payload;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 500,
        "wires": [
            [
                "36bbf34f8f4ec2ac"
            ]
        ]
    },
    {
        "id": "0337520c937b5a0c",
        "type": "comment",
        "z": "9ba7388927fccc31",
        "name": "",
        "info": "## wt.csv.import\n1 message / 5 seconds\n\n## wt.csv.import.chunk\n1 message / 10 seconds",
        "x": 80,
        "y": 40,
        "wires": []
    }
]